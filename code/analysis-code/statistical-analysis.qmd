---
title: "Statistical Analysis"
author: "Alexis Gonzalez"
date: 
output: html_document
---

# loading in packages

```{r}
library(tidyverse)
library(here) 
library(dplyr)
library(skimr)
library(ggplot2)
library(tidymodels)
library(lubridate)
library(ranger)
library(parsnip)
library(poissonreg)
library(MASS)
```

#Load in the data

```{r}
#Path to data. 
data_location <- here::here("data","processed-data","processeddata.rds")
#load data
mydata <- readRDS(data_location)
```


# temporal analysis of clinical isolates. Remember that every clinical isolate is like a human case of Listeriosis.

#For this analysis I will make some changes to my data by separating the time data into seasons.Winter is considered December, January and February; spring is March through May; summer is June through August; and fall or autumn is September through November.

#POISSON MODELING
```{r}
# Create monthly counts for clinical, food, and environmental
monthly_clinical <- mydata %>% 
  filter(clinical == "Yes") %>% 
  mutate(month = floor_date(`Create date`, "month")) %>% 
  group_by(month) %>% 
  summarize(clinical_count = n()) %>% 
  ungroup()

monthly_food <- mydata %>% 
  filter(food == "Yes") %>% 
  mutate(month = floor_date(`Create date`, "month")) %>% 
  group_by(month) %>% 
  summarize(food_count = n()) %>% 
  ungroup()

monthly_environmental <- mydata %>% 
  filter(isolation_source == "environmental") %>% 
  mutate(month = floor_date(`Create date`, "month")) %>% 
  group_by(month) %>% 
  summarize(environmental_count = n()) %>% 
  ungroup()

# Combine all counts into one dataset
monthly_counts_combined <- monthly_clinical %>%
  full_join(monthly_food, by = "month") %>%
  full_join(monthly_environmental, by = "month")

# View the combined dataset
head(monthly_counts_combined)

```

#TEMPORAL x CLINCAL

```{r}
# Filling in gaps with 0 for all counts
monthly_counts_combined <- monthly_counts_combined %>%
  complete(month = seq.Date(min(month), max(month), by = "month"),
           fill = list(clinical_count = 0, food_count = 0, environmental_count = 0))

# Feature engineering: extracting the month from the data
monthly_counts_combined <- monthly_counts_combined %>%
  mutate(month_name = factor(month(month, label = TRUE), ordered = FALSE))

# Splitting the data
set.seed(123)
data_split2 <- initial_time_split(monthly_counts_combined, prop = 0.8)
train_data2 <- training(data_split2)
test_data2  <- testing(data_split2)

# Create a recipe for clinical_count
poisson_recipe1 <- recipe(clinical_count ~ month_name, data = train_data2) %>%
  step_dummy(all_nominal_predictors())

# Select Poisson model
poisson_model <- poisson_reg(
  mode = "regression",
  penalty = NULL,
  mixture = NULL,
  engine = "glm"
)

# Create a workflow
library(poissonreg)
poisson_wf1 <- workflow() %>%
  add_model(poisson_model) %>%
  add_recipe(poisson_recipe1)

# Fit the model
poisson_fit1 <- poisson_wf1 %>% fit(data = train_data2)

# Make predictions
predictions1 <- predict(poisson_fit1, new_data = train_data2) %>%
  bind_cols(train_data2)

# Evaluate performance
library(yardstick)
metric_table <- metrics(predictions1, truth = clinical_count, estimate = .pred)
save_table_location <- here::here("results","tables","metric_table.rds")
saveRDS(metric_table, file = save_table_location)
# Predict future clinical isolate counts
last_month <- max(monthly_counts_combined$month)

future_months1 <- tibble(
  month = seq.Date(from = last_month %m+% months(1), by = "month", length.out = 12)
) %>%
  mutate(month_name = factor(month(month, label = TRUE), ordered = FALSE))

# Future predictions
future_predictions1 <- predict(poisson_fit1, new_data = future_months1) %>%
  bind_cols(future_months1)

# Combine actual and forecasted for plotting
combined_months1 <- bind_rows(
  monthly_counts_combined %>% select(month, clinical_count) %>% mutate(source = "Actual"),
  future_predictions1 %>% rename(clinical_count = .pred) %>% mutate(source = "Forecast")
)

# Plot actual vs forecast
seasonalpreds <- ggplot(combined_months1, aes(x = month, y = clinical_count, color = source)) +
  geom_line() +
  labs(title = "Actual and Forecasted Clinical Isolate Counts",
       y = "Clinical Count", x = "Month") +
  scale_color_manual(values = c("Actual" = "black", "Forecast" = "blue")) +
  theme_minimal()

print(seasonalpreds)

# Extract the fitted glm model from the workflow
poisson_fit1_glm <- extract_fit_engine(poisson_fit1)

# Calculate deviance residuals
deviance_residuals_clinical <- residuals(poisson_fit1_glm, type = "deviance")

# Calculate Pearson residuals
pearson_residuals_clinical <- residuals(poisson_fit1_glm, type = "pearson")

# Plot deviance residuals

residuals_df <- train_data2 %>%
  mutate(
    deviance_residual = deviance_residuals_clinical,
    pearson_residual = pearson_residuals_clinical,
    fitted = fitted(poisson_fit1_glm)
  )

# Deviance residual plot
ggplot(residuals_df, aes(x = fitted, y = deviance_residual)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  labs(title = "Deviance Residuals vs Fitted Values",
       x = "Fitted Values", y = "Deviance Residuals") +
  theme_minimal()

# Pearson residual plot
ggplot(residuals_df, aes(x = fitted, y = pearson_residual)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "blue", linetype = "dashed") +
  labs(title = "Pearson Residuals vs Fitted Values",
       x = "Fitted Values", y = "Pearson Residuals") +
  theme_minimal()

# Estimate dispersion parameter
# Dispersion = sum of squared Pearson residuals / residual degrees of freedom
pearson_chisq <- sum(residuals_df$pearson_residual^2)
resid_df <- poisson_fit1_glm$df.residual
dispersion_estimate <- pearson_chisq / resid_df

print(paste("Estimated dispersion:", round(dispersion_estimate, 3)))

```




#TEMPORAL X FOOD

```{r}
# Filling in gaps with 0 for food_count
monthly_counts_combined <- monthly_counts_combined %>%
  complete(month = seq.Date(min(month), max(month), by = "month"),
           fill = list(food_count = 0))

# Feature engineering: extracting the month from the data
monthly_counts_combined <- monthly_counts_combined %>%
  mutate(month_name = factor(month(month, label = TRUE), ordered = FALSE))

# Splitting the data
set.seed(123)
data_split2 <- initial_time_split(monthly_counts_combined, prop = 0.8)
train_data2 <- training(data_split2)
test_data2  <- testing(data_split2)

# Create a recipe for food_count
poisson_recipe_food <- recipe(food_count ~ month_name, data = train_data2) %>%
  step_dummy(all_nominal_predictors())

# Select Poisson model
poisson_model_food <- poisson_reg(
  mode = "regression",
  penalty = NULL,
  mixture = NULL,
  engine = "glm"
)

# Create a workflow
poisson_wf_food <- workflow() %>%
  add_model(poisson_model_food) %>%
  add_recipe(poisson_recipe_food)

# Fit the model
poisson_fit_food <- poisson_wf_food %>% fit(data = train_data2)

# Make predictions
predictions_food <- predict(poisson_fit_food, new_data = train_data2) %>%
  bind_cols(train_data2)

# Evaluate performance
library(yardstick)
metric_table2 <- metrics(predictions_food, truth = food_count, estimate = .pred)
save_table_location <- here::here("results","tables","metric_table2.rds")
saveRDS(metric_table2, file = save_table_location)

# Predict future food isolate counts
last_month <- max(monthly_counts_combined$month)

future_months_food <- tibble(
  month = seq.Date(from = last_month %m+% months(1), by = "month", length.out = 12)
) %>%
  mutate(month_name = factor(month(month, label = TRUE), ordered = FALSE))

# Future predictions
future_predictions_food <- predict(poisson_fit_food, new_data = future_months_food) %>%
  bind_cols(future_months_food)

# Combine actual and forecasted for plotting
combined_months_food <- bind_rows(
  monthly_counts_combined %>% select(month, food_count) %>% mutate(source = "Actual"),
  future_predictions_food %>% rename(food_count = .pred) %>% mutate(source = "Forecast")
)

# Plot actual vs forecast
pmodel_food <- ggplot(combined_months_food, aes(x = month, y = food_count, color = source)) +
  geom_line() +
  labs(title = "Actual and Forecasted Food Isolate Counts",
       y = "Food Count", x = "Month") +
  scale_color_manual(values = c("Actual" = "black", "Forecast" = "blue")) +
  theme_minimal()

# Print and save the plot
print(pmodel_food)
ggsave("/Users/alexisgonzalez/Desktop/MADA/Gonzalez-MADA-project/results/figures/pmodel_food.png",
       plot = pmodel_food, width = 8, height = 6, dpi = 300)


# Extract the fitted glm model
poisson_fit_food_glm <- extract_fit_engine(poisson_fit_food)

# Calculate deviance and Pearson residuals
deviance_residuals_food <- residuals(poisson_fit_food_glm, type = "deviance")
pearson_residuals_food <- residuals(poisson_fit_food_glm, type = "pearson")

# Create residuals data frame
residuals_df_food <- train_data2 %>%
  mutate(
    deviance_residual = deviance_residuals_food,
    pearson_residual = pearson_residuals_food,
    fitted = fitted(poisson_fit_food_glm)
  )

# Deviance residual plot
ggplot(residuals_df_food, aes(x = fitted, y = deviance_residual)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  labs(title = "Deviance Residuals vs Fitted Values (Food)",
       x = "Fitted Values", y = "Deviance Residuals") +
  theme_minimal()

# Pearson residual plot
ggplot(residuals_df_food, aes(x = fitted, y = pearson_residual)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "blue", linetype = "dashed") +
  labs(title = "Pearson Residuals vs Fitted Values (Food)",
       x = "Fitted Values", y = "Pearson Residuals") +
  theme_minimal()

# Estimate dispersion
pearson_chisq_food <- sum(residuals_df_food$pearson_residual^2)
resid_df_food <- poisson_fit_food_glm$df.residual
dispersion_estimate_food <- pearson_chisq_food / resid_df_food

print(paste("Estimated dispersion (food model):", round(dispersion_estimate_food, 3)))


```

#TEMPORAL X ENVIRONMENTAL

```{r}
# Filling in gaps with 0 for environmental_count
monthly_counts_combined <- monthly_counts_combined %>%
  complete(month = seq.Date(min(month), max(month), by = "month"),
           fill = list(environmental_count = 0))

# Feature engineering: extracting the month from the data
monthly_counts_combined <- monthly_counts_combined %>%
  mutate(month_name = factor(month(month, label = TRUE), ordered = FALSE))

# Splitting the data
set.seed(123)
data_split2 <- initial_time_split(monthly_counts_combined, prop = 0.8)
train_data2 <- training(data_split2)
test_data2  <- testing(data_split2)

# Create a recipe for environmental_count
poisson_recipe_env <- recipe(environmental_count ~ month_name, data = train_data2) %>%
  step_dummy(all_nominal_predictors())

# Select Poisson model
poisson_model_env <- poisson_reg(
  mode = "regression",
  penalty = NULL,
  mixture = NULL,
  engine = "glm"
)

# Create a workflow
poisson_wf_env <- workflow() %>%
  add_model(poisson_model_env) %>%
  add_recipe(poisson_recipe_env)

# Fit the model
poisson_fit_env <- poisson_wf_env %>% fit(data = train_data2)

# Make predictions
predictions_env <- predict(poisson_fit_env, new_data = train_data2) %>%
  bind_cols(train_data2)

# Evaluate performance
library(yardstick)
metric_table3 <- metrics(predictions_env, truth = environmental_count, estimate = .pred)
save_table_location <- here::here("results","tables","metric_table3.rds")
saveRDS(metric_table3, file = save_table_location)
# Predict future environmental isolate counts
last_month <- max(monthly_counts_combined$month)

future_months_env <- tibble(
  month = seq.Date(from = last_month %m+% months(1), by = "month", length.out = 12)
) %>%
  mutate(month_name = factor(month(month, label = TRUE), ordered = FALSE))

# Future predictions
future_predictions_env <- predict(poisson_fit_env, new_data = future_months_env) %>%
  bind_cols(future_months_env)

# Combine actual and forecasted for plotting
combined_months_env <- bind_rows(
  monthly_counts_combined %>% select(month, environmental_count) %>% mutate(source = "Actual"),
  future_predictions_env %>% rename(environmental_count = .pred) %>% mutate(source = "Forecast")
)

# Plot actual vs forecast
pmodel_env <- ggplot(combined_months_env, aes(x = month, y = environmental_count, color = source)) +
  geom_line() +
  labs(title = "Actual and Forecasted Environmental Isolate Counts",
       y = "Environmental Count", x = "Month") +
  scale_color_manual(values = c("Actual" = "black", "Forecast" = "blue")) +
  theme_minimal()

# Print and save the plot
print(pmodel_env)
ggsave("/Users/alexisgonzalez/Desktop/MADA/Gonzalez-MADA-project/results/figures/pmodel_env.png",
       plot = pmodel_env, width = 8, height = 6, dpi = 300)

#RESIDUALS AND DISPERSION

# Extract the fitted glm model
poisson_fit_env_glm <- extract_fit_engine(poisson_fit_env)

# Calculate deviance and Pearson residuals
deviance_residuals_env <- residuals(poisson_fit_env_glm, type = "deviance")
pearson_residuals_env <- residuals(poisson_fit_env_glm, type = "pearson")

# Create residuals data frame
residuals_df_env <- train_data2 %>%
  mutate(
    deviance_residual = deviance_residuals_env,
    pearson_residual = pearson_residuals_env,
    fitted = fitted(poisson_fit_env_glm)
  )

# Deviance residual plot
ggplot(residuals_df_env, aes(x = fitted, y = deviance_residual)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  labs(title = "Deviance Residuals vs Fitted Values (Environmental)",
       x = "Fitted Values", y = "Deviance Residuals") +
  theme_minimal()

# Pearson residual plot
ggplot(residuals_df_env, aes(x = fitted, y = pearson_residual)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "blue", linetype = "dashed") +
  labs(title = "Pearson Residuals vs Fitted Values (Environmental)",
       x = "Fitted Values", y = "Pearson Residuals") +
  theme_minimal()

# Estimate dispersion
pearson_chisq_env <- sum(residuals_df_env$pearson_residual^2)
resid_df_env <- poisson_fit_env_glm$df.residual
dispersion_estimate_env <- pearson_chisq_env / resid_df_env

print(paste("Estimated dispersion (environmental model):", round(dispersion_estimate_env, 3)))

```

#Negative Binomial 

#CLINICAL
```{r}
# Prepare data
clinical_counts <- monthly_counts_combined %>%
  select(month, clinical_count) %>%
  complete(month = seq.Date(min(month), max(month), by = "month"),
           fill = list(clinical_count = 0)) %>%
  mutate(month_name = factor(month(month, label = TRUE), ordered = FALSE))

# Split
set.seed(123)
clinical_split <- initial_time_split(clinical_counts, prop = 0.8)
clinical_train <- training(clinical_split)
clinical_test  <- testing(clinical_split)

# Recipe
clinical_recipe <- recipe(clinical_count ~ month_name, data = clinical_train) %>%
  step_dummy(all_nominal_predictors())

# Model
clinical_nb_model <- linear_reg(mode = "regression") %>%
  set_engine("glm", family = MASS::negative.binomial(theta = 3.5))

# Workflow
clinical_nb_wf <- workflow() %>%
  add_model(clinical_nb_model) %>%
  add_recipe(clinical_recipe)

# Fit
clinical_nb_fit <- clinical_nb_wf %>%
  fit(data = clinical_train)

# Training predictions + metrics
clinical_preds <- predict(clinical_nb_fit, new_data = clinical_train) %>%
  bind_cols(clinical_train)

metric_table4<-metrics(clinical_preds, truth = clinical_count, estimate = .pred)
save_table_location <- here::here("results","tables","metric_table4.rds")
saveRDS(metric_table4, file = save_table_location)


##DISPERSION##
# Extract the fitted glm object
nb_fit_engine <- extract_fit_engine(clinical_nb_fit)

# Calculate Pearson residuals
pearson_resids <- residuals(nb_fit_engine, type = "pearson")

# Residual degrees of freedom
resid_df <- nb_fit_engine$df.residual

# Dispersion estimate
dispersion <- sum(pearson_resids^2) / resid_df

# Print
print(paste("Estimated Dispersion (Negative Binomial):", round(dispersion, 3)))

nmodel_clinical <- ggplot(clinical_preds, aes(x = month)) +
  geom_line(aes(y = clinical_count, color = "Actual")) +
  geom_line(aes(y = .pred, color = "Predicted")) +
  labs(
    title = "Actual and Predicted Clinical Isolate Counts (Negative Binomial Model)",
    x = "Month",
    y = "Clinical Count"
  ) +
  scale_color_manual(
    name = "Source",
    values = c("Actual" = "black", "Predicted" = "blue")
  ) +
  theme_minimal()

# Display the plot
nmodel_clinical

ggsave("/Users/alexisgonzalez/Desktop/MADA/Gonzalez-MADA-project/results/figures/nmodel_clinical.png",
       plot = nmodel_clinical, width = 8, height = 6, dpi = 300)
```



#FOOD



```{r}
# Prepare data
food_counts <- monthly_counts_combined %>%
  select(month, food_count) %>%
  complete(month = seq.Date(min(month), max(month), by = "month"),
           fill = list(food_count = 0)) %>%
  mutate(month_name = factor(month(month, label = TRUE), ordered = FALSE))

# Split
set.seed(123)
food_split <- initial_time_split(food_counts, prop = 0.8)
food_train <- training(food_split)
food_test  <- testing(food_split)

# Recipe
food_recipe <- recipe(food_count ~ month_name, data = food_train) %>%
  step_dummy(all_nominal_predictors())

# Model
food_nb_model <- linear_reg(mode = "regression") %>%
  set_engine("glm", family = MASS::negative.binomial(theta = 2))

# Workflow
food_nb_wf <- workflow() %>%
  add_model(food_nb_model) %>%
  add_recipe(food_recipe)

# Fit
food_nb_fit <- food_nb_wf %>%
  fit(data = food_train)

# Training predictions + metrics
food_preds <- predict(food_nb_fit, new_data = food_train) %>%
  bind_cols(food_train)

metrics_table5 <- metrics(food_preds, truth = food_count, estimate = .pred)
save_table_location <- here::here("results","tables","metrics_table5.rds")
saveRDS(metrics_table5, file = save_table_location)
# Extract the fitted glm object from the workflow
food_nb_engine <- extract_fit_engine(food_nb_fit)

# Calculate Pearson residuals
pearson_resids_food <- residuals(food_nb_engine, type = "pearson")

# Residual degrees of freedom
resid_df_food <- food_nb_engine$df.residual

# Dispersion estimate
dispersion_food <- sum(pearson_resids_food^2) / resid_df_food

# Print the dispersion
print(paste("Estimated Dispersion (Negative Binomial - Food Model):", round(dispersion_food, 3)))


nmodel_food <- ggplot(food_preds, aes(x = month)) +
  geom_line(aes(y = food_count, color = "Actual")) +
  geom_line(aes(y = .pred, color = "Predicted")) +
  labs(
    title = "Actual and Predicted Food Isolate Counts (Negative Binomial Model)",
    x = "Month",
    y = "Food Count"
  ) +
  scale_color_manual(
    name = "Source",
    values = c("Actual" = "black", "Predicted" = "blue")
  ) +
  theme_minimal()

# Print the plot
nmodel_food

ggsave("/Users/alexisgonzalez/Desktop/MADA/Gonzalez-MADA-project/results/figures/nmodel_food.png",
       plot = nmodel_food, width = 8, height = 6, dpi = 300)



```
#ENVIRONMENTAL
```{r}

# Prepare data
environmental_counts <- monthly_counts_combined %>%
  select(month, environmental_count) %>%
  complete(month = seq.Date(min(month), max(month), by = "month"),
           fill = list(environmental_count = 0)) %>%
  mutate(month_name = factor(month(month, label = TRUE), ordered = FALSE))

# Split
set.seed(123)
env_split <- initial_time_split(environmental_counts, prop = 0.8)
env_train <- training(env_split)
env_test  <- testing(env_split)

# Recipe
env_recipe <- recipe(environmental_count ~ month_name, data = env_train) %>%
  step_dummy(all_nominal_predictors())

# Model
env_nb_model <- linear_reg(mode = "regression") %>%
  set_engine("glm", family = MASS::negative.binomial(theta = 1))

# Workflow
env_nb_wf <- workflow() %>%
  add_model(env_nb_model) %>%
  add_recipe(env_recipe)

# Fit
env_nb_fit <- env_nb_wf %>%
  fit(data = env_train)

# Training predictions + metrics
env_preds <- predict(env_nb_fit, new_data = env_train) %>%
  bind_cols(env_train)

metrics_table6 <- metrics(env_preds, truth = environmental_count, estimate = .pred)
save_table_location <- here::here("results","tables","metrics_table6.rds")
saveRDS(metrics_table6, file = save_table_location)
# Extract the fitted glm object from the workflow
env_nb_engine <- extract_fit_engine(env_nb_fit)

# Calculate Pearson residuals
pearson_resids_env <- residuals(env_nb_engine, type = "pearson")

# Residual degrees of freedom
resid_df_env <- env_nb_engine$df.residual

# Dispersion estimate
dispersion_env <- sum(pearson_resids_env^2) / resid_df_env

# Print the dispersion
print(paste("Estimated Dispersion (Negative Binomial - Environmental Model):", round(dispersion_env, 3)))

nmodel_env <- ggplot(env_preds, aes(x = month)) +
  geom_line(aes(y = environmental_count, color = "Actual")) +
  geom_line(aes(y = .pred, color = "Predicted")) +
  labs(
    title = "Actual and Predicted Environmental Isolate Counts (Negative Binomial Model)",
    x = "Month",
    y = "Environmental Count"
  ) +
  scale_color_manual(
    name = "Source",
    values = c("Actual" = "black", "Predicted" = "blue")
  ) +
  theme_minimal()

# Display the plot
nmodel_env


ggsave("/Users/alexisgonzalez/Desktop/MADA/Gonzalez-MADA-project/results/figures/nmodel_env.png",
       plot = nmodel_env, width = 8, height = 6, dpi = 300)

```

