---
title: "An example cleaning script"
author: "Andreas Handel"
date: "2024-02-07"
output: html_document
---


# Processing script

This contains the same code and comments/information as `processingcode.R`.

This just shows it as Quarto file, to give you an idea how to do it in a setup that combines code and text in a single file.

See the other Quarto file for my currently preferred approach of pulling code from the R script into the Quarto file.


# Setup

Load needed packages. make sure they are installed.

```{r}
library(readxl) #for loading Excel files
library(dplyr) #for data processing/cleaning
library(tidyr) #for data processing/cleaning
library(skimr) #for nice visualization of data 
library(here) #to set paths
```


# Data loading

Note that for functions that come from specific packages (instead of base R), I often specify both package and function like so:
package::function() that's not required one could just call the function specifying the package makes it clearer where the function "lives",
but it adds typing. You can do it either way.


```{r}
# path to data
# note the use of the here() package and not absolute paths
data_location <- here::here("data","raw-data","lmonoisolates.xls")
rawdata <- readxl::read_excel(data_location)
```


# Check data

```{r}
summary(rawdata)
```


Several ways of looking at the data

```{r}
dplyr::glimpse(rawdata)
summary(rawdata)
head(rawdata)
skimr::skim(rawdata)
```

```{r}
unique(rawdata$BioSample)
```
```{r}
unique(rawdata$Location)
```
```{r}
unique(rawdata$`Create date`)
```




# Cleaning

After inspecting the data,I have dedcided to remove some variables that I will not use. This will be serovar, assembly, biosample for now. I want to try and make a map so i will keep in isolate names and snp distances and what not.

```{r}
lmono2 <- rawdata %>% 
  select(-c(Serovar, Assembly, BioSample))
```
Next I want to reformat the dates so that it removes the timestamp. I will just be keeping the year, month and day
```{r}
lmono2$`Create date` <- as.Date(lmono2$`Create date`)
print(lmono2$`Create date`)
```
Next I will see the range of dates and select a 15 year time frame.
```{r}
lmono3 <- lmono2 %>%
  filter(`Create date` >= as.Date("2010-01-01") & `Create date` <= as.Date("2024-12-31"))
```
Finally I will check for any missing entries, if there are none I am good to move on.
```{r}
any(is.na(lmono3))
lmono3[!complete.cases(lmono3), ]  # Shows me what rows have missing data

```
#So this showed me that I need to remove another variable, all of the values for computed type and ...18 are NA!
```{r}
lmono4 <- lmono3 %>%
  select(-c(`Computed types`,...18))
```
#Now lets see where the missing data is 
```{r}
lmono4[!complete.cases(lmono4), ] 
```
#Now, I really want to compare food vs clinical isolates so I will make 2 new variables, One variable called Food amd one called Clinical. Food will have all entries that are food sources
```{r}
#first I am going to look at the entries, some entries are specific like hotdog or blood and some just say food or clinical, I want to include those specific ones as well so I need to see what I am working with. 
unique(lmono4$`Isolation type`)
#Some of the products under environmental other are food products so I will put environmnetal other into its own category and then filter out the non-food products since it is mostly foods.
```

```{r}
#This will create new variable "clinical"
lmono5 <- lmono4 %>%
  mutate(clinical = ifelse(`Isolation type` == "clinical", "Yes", "No"))
```


```{r}
lmono6 <- lmono5 %>%
  mutate(food = case_when(
    `Isolation type` %in% c("environmental/other", "Not Sliced-Pork", "Sliced-Pork", 
                            "Not Sliced-Turkey", "Sausage Products-Pork", 
                            "Salad/Spread/Pate-Pork", "Salad/Spread/Pate-Chicken", 
                            "Meat/Nonmeat Combination-Beef", "Meat/Nonmeat Combination", 
                            "Sliced-Beef", "Sliced-Turkey", "Not Sliced-Chicken", 
                            "Meat/Nonmeat Combination-Other Poultry", 
                            "Meat/Nonmeat Combination-Combination species", "raw", 
                            "Meat/Nonmeat Combination-Chicken", 
                            "Sausage Products-Unknown species", 
                            "Meat/Nonmeat Combination-Turkey", 
                            "Sausage Products-Beef") & 
    !`Isolation source` %in% c("environmental swab", "environmental swab sponge floor", 
                               "condensate tray", "squeegee", "chain", "wrench", 
                               "underhopper", "environmental swab sponge non food contact surface", 
                               "environmental swab sponge pallet in cooler", 
                               "environmental swab of shelf", 
                               "Environmental Isolate, sponge swab","environmental swab sponge") ~ "Yes",
    TRUE ~ "No"
  ))

```
#Finally, I want to remove the observations that are stool samples that will be bovine, pigeon and catbird
```{r}
lmono_final <- lmono6 %>%
  filter(!`Isolation type` %in% c("Bos taurus\"\"", "pigeon", "catbird"))
```

```{r}
processeddata <-lmono_final
```


# Save data 

Finally, we save the clean data as RDS file. I suggest you save your processed and cleaned data as RDS or RDA/Rdata files. 
This preserves coding like factors, characters, numeric, etc.  If you save as CSV, that information would get lost.
However, CSV is better for sharing with others since it's plain text. If you do CSV, you might want to write down somewhere what each variable is.

See here for some suggestions on how to store your processed data:
http://www.sthda.com/english/wiki/saving-data-into-r-data-format-rds-and-rdata

```{r}
save_data_location <- here::here("data","processed-data","processeddata.rds")
saveRDS(processeddata, file = save_data_location)
```





